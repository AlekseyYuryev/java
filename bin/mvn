#!/bin/sh
#

# Define default values
DEFAULT_POM_TEMPLATE="pom-template.xml"
DEFAULT_POM_TEMPLATE_PROPERTIES="pom-template.properties"

#DEBUG="true"
FP_POM_TEMPLATE_PROPERTIES=""
FP_CACHE=""
findProperties() {
	[ "$DEBUG" ] && echo "\t1\tfindProperties()"
	FP_POM_TEMPLATE_PROPERTIES_NAME="pom-template.properties"
	DOT_DOT="../"
	if [ ! "$FP_CACHE" ]; then
		[ "$DEBUG" ] && echo "\t2\tfindProperties()"
		FP_POM_TEMPLATE_PROPERTIES="$FP_POM_TEMPLATE_PROPERTIES_NAME"
		FP_CWD=$DOT_DOT
		FP_LAST_CWD=""
		FP_IS_NOT_ROOT="false"
		while [ ! -f "$FP_POM_TEMPLATE_PROPERTIES" ] && [ "$FP_IS_NOT_ROOT" != "" ]; do
			[ "$DEBUG" ] && echo "\t3\tfindProperties()"
			FP_POM_TEMPLATE_PROPERTIES="${DOT_DOT}${FP_POM_TEMPLATE_PROPERTIES}"
			FP_LAST_CWD=$FP_CWD
			FP_CWD="${DOT_DOT}${FP_CWD}"
			# FIXME: This is not the best way to determine if we are at the root.
			FP_IS_NOT_ROOT="`diff $FP_LAST_CWD $FP_CWD`"
		done
		FP_CACHE=true
	fi
}

# FIXME: This implementation of newer_than() does not use absolute paths to
# FIXME: distinguish between the two files being tested.
newer_than() {
	FILE_1=$1
	FILE_2=$2
	FILE_1_NAME="`basename $FILE_1`"
	NEWER_THAN="`ls -xt $FILE_1 $FILE_2 | awk '{print $1}' | xargs basename`"
#	[ "$DEBUG" ] && echo "newer_than($1, $2): $NEWER_THAN"
	[ "$NEWER_THAN" = "$FILE_1_NAME" ] && return 1 || return 0;
}

updatePOM() {
	UP_POM_TEMPLATE="$1"
	UP_PARENT_POM_TEMPLATE="$2"
	[ "$DEBUG" ] && echo "\t1\tupdatePOM($UP_POM_TEMPLATE, $UP_PARENT_POM_TEMPLATE)"
	UP_PARENT_POM_TEMPLATE="`echo $UP_PARENT_POM_TEMPLATE | sed 's/\([\.]\{1,2\}\/\)*//g'`"
	UP_PARENT_POM="`echo $UP_PARENT_POM_TEMPLATE | sed s'/-template//'`"
	UP_POM="`echo $UP_POM_TEMPLATE | sed 's/-template//'`"

	findProperties;
	if [ ! -f "$UP_POM" ] || [ "`newer_than $UP_POM_TEMPLATE $UP_POM; echo $?`" = "1" ] || [ "`newer_than $FP_POM_TEMPLATE_PROPERTIES $UP_POM; echo $?`" = "1" ]; then
		[ "$DEBUG" ] && echo "\t2\tupdatePOM($UP_POM_TEMPLATE, $UP_PARENT_POM_TEMPLATE)"
		PROPERTIES=`awk -F\. '{print NF " " $0} ' $FP_POM_TEMPLATE_PROPERTIES | sort -r | awk '{print $2}' | grep -v '^$'`
		UPDATE_CMD="`echo \"$PROPERTIES\" | sed 's/$/ DELIMITER_STRING/' | xargs echo | sed 's/\(\s*=\s*\)\([^ ]*\)\( DELIMITER_STRING\)/\\\\\\\\\\\\\\\\\\\\(\\\\\\\\\\\\\\\\\\\\(\\\\\\\\\\\\\\\\\\\\)\\\\\\\\\\\\\\\\\\\\|\\\\\\\\\\\\\\\\\\\\([-\.a-zA-Z]*\\\\\\\\\\\\\\\\\\\\)\\\\\\\\\\\\\\\\\\\\)\\\\\\\\\\\\\\\\\\\\}\/\2\/g/g' | sed 's/\(\( \)\|\(^\)\)\([a-zA-Z0-9]*\)/\1\-e \\\\s\/\\\\\\$\\\\{\4/g' | sed \s/\^/\-e\ \'s\\\/$UP_PARENT_POM_TEMPLATE\\\/$UP_PARENT_POM\\\/g\'\ /` $UP_POM_TEMPLATE"
		echo $UPDATE_CMD | xargs sed > $UP_POM
		echo "Updated: $UP_POM"
	fi
}

updateParentPOMs() {
	UPP_POM_TEMPLATE="$1"
	UPP_PARENT_POM_TEMPLATE=$DEFAULT_POM_TEMPLATE
	while [ -f $UPP_POM_TEMPLATE ]; do
		UPP_PARENT_POM_TEMPLATE="../$UPP_PARENT_POM_TEMPLATE"
		if [ "`cat $UPP_POM_TEMPLATE | grep relativePath`" ]; then
			UPP_PARENT_POM_TEMPLATE="`cat $UPP_POM_TEMPLATE | sed 's/<relativePath>//' | sed 's/<\/relativePath>//'`"
		fi
		updatePOM $UPP_POM_TEMPLATE $UPP_PARENT_POM_TEMPLATE;
		UPP_POM_TEMPLATE="$UPP_PARENT_POM_TEMPLATE"
	done
}

UCP_ALL_MODULES=""
UCP_INNER_MODULES=""
UCP_OUTER_MODULES=""
updateChildPOMs() {
	UCP_FILE_NAME="$1"
	UCP_OUTER_MODULES="./"
	while [ "$UCP_OUTER_MODULES" != "" ]; do
		for UCP_CHILD_MODULE in $UCP_OUTER_MODULES; do
			# Make sure that the POM-TEMPLATE file exists
			if [ -f ${UCP_CHILD_MODULE}${UCP_FILE_NAME} ]; then
				# Get all module entries and remove <module>, </module> and <!--.*-->
				UCP_UCP_CHILD_MODULE_MODULES="`grep '<module>' ${UCP_CHILD_MODULE}${UCP_FILE_NAME} | sed 's/\(\(\(<\)\|\(<\/\)\)module>\)\|\(<!--.*-->\)//g' | xargs echo`"
				# If we have modules
				if [ "$UCP_UCP_CHILD_MODULE_MODULES" != "" ]; then
					# Define the dir that the module is in, and escape the "/"
					ESCAPED_DIR="`echo "$UCP_CHILD_MODULE/" | sed 's/\//\\\\\//g'`"
					# Prepend all module names with the appropriate parent module dir
					UCP_UCP_CHILD_MODULE_MODULES="`echo "$UCP_UCP_CHILD_MODULE_MODULES" | sed \s/\\\\\(\\\\\(\ \\\\\)\\\\\|\\\\\(\^\\\\\)\\\\\)/\\\\1$ESCAPED_DIR/g`"

					# Append the module names to the INNER list and continue
					# iterating through the OUTER list
					UCP_INNER_MODULES="$UCP_INNER_MODULES $UCP_UCP_CHILD_MODULE_MODULES"
				fi
			fi
		done

		# Overwrite the UCP_FILE_NAME to the default pom-template.xml
		UCP_FILE_NAME="/$DEFAULT_POM_TEMPLATE"

		# Append the UCP_INNER_MODULES list to UCP_ALL_MODULES
		UCP_ALL_MODULES="$UCP_ALL_MODULES $UCP_INNER_MODULES"

		# Replace the UCP_OUTER_MODULES list as the UCP_INNER_MODULES list
		# so that it we can iterate through it next
		UCP_OUTER_MODULES="$UCP_INNER_MODULES"

		# Empty out the UCP_INNER_MODULES list
		UCP_INNER_MODULES=""
	done

	# Remove all ".//" substrings.
	UCP_ALL_MODULES="`echo "$UCP_ALL_MODULES" | sed 's/\.\/\///g'`"

	# Iterate through the UCP_ALL_MODULES list
	for UCP_POM_TEMPLATE in $UCP_ALL_MODULES; do
		# Call updatePOM with the default pom-template.xml as the parent pom
		updatePOM $UCP_POM_TEMPLATE/$DEFAULT_POM_TEMPLATE $DEFAULT_POM_TEMPLATE
	done
}

# Parse the arguments
ARGS=""
POM_TEMPLATE=$DEFAULT_POM_TEMPLATE
while [ $# != 0 ]; do
	flag="$1"
	case "$flag" in
		-ut) UPDATE_TEMPLATES=true
			shift;
			continue;
			;;
		--update-templates) UPDATE_TEMPLATES=true
			shift;
			continue;
			;;
		-ft) if [ $# -gt 1 ]; then
			POM_TEMPLATE="$2"
			shift
			fi
			shift;
			continue;
			;;
		clean) CLEAN=true
			;;
		--help) HELP=true
			;;
	esac
	ARGS="$ARGS $1"
	shift
done

# Update all parent POMs
updateParentPOMs $POM_TEMPLATE;

# Update all child POMs
updateChildPOMs $POM_TEMPLATE;

# If we only want to update from the template poms, then exit now
if [ $UPDATE_TEMPLATES ]; then
	exit 0;
fi

# Find the original mvn script
MVN="`which -a mvn | sed -n '2p'`"

# If goal=clean, then set maven.test.skip=true (this should already be the
# default in maven.
if [ $CLEAN ]; then
	ARGS="-Dmaven.test.skip $ARGS"
fi

# Get help from the original mvn and then print our additional options
if [ $HELP ]; then
	$MVN $ARGS
	echo
	echo "Additional options:"
	echo " -ut,--update-templates        Update POM files from POM-TEMPLATE"
	echo "                               template files."
	echo " -ft                           Force the use of an alternate POM-TEMPLATE"
	echo "                               file."
	exit
fi

$MVN $ARGS
